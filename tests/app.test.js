describe('Test', function() {
	beforeEach(module('myApp'));

	beforeEach(module('template.html'));
	beforeEach(module('templateEvent.html'));

// INITIALISATION ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	var MockRandomService;
	var mockTransformService;
	var transformFilter;

	beforeEach(function() {
		mockTransformService = jasmine.createSpyObj('mySpy', ['transform']);
		mockTransformService.transform.and.returnValue('transformed value');
	
		module(function($provide) {
			$provide.value('TransformService', mockTransformService);
		});

	});


	beforeEach(function() {
		MockRandomService = jasmine.createSpyObj('mySpy', ['getFirstName', 'getLastName']);
		MockRandomService.getFirstName.and.returnValue('Jane');
		MockRandomService.getLastName.and.returnValue('Doe');
	
		module(function($provide) {
			$provide.value('RandomNameService', MockRandomService);
		});
	});

	var $controller, $scope;
	beforeEach(inject(function(_$controller_) {
		$controller = _$controller_;
		$scope = {};
	}));
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING SIMPLE SERVICE ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING SIMPLE SERVICE', function() {
		var TestService;

		beforeEach( inject( function(_TestService_) {
			TestService = _TestService_;
		}));

		it ('should return test data', function() {
			expect(TestService.getData()).toEqual("azeaze");
		});
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING CONTROLLER ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING SIMPLE SERVICE', function() {

		it('should return the square of the value provided', function() {
			var controller = $controller('myController', {$scope: $scope});
			$scope.calculateSquare(8);
			expect($scope.result).toEqual(64);
		});
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING CONTROLLER WITH DEPENDENCIES ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING CONTROLLER WITH DEPENDENCIES', function() {
		var mockCalculatorService;
		beforeEach(function() {
			mockCalculatorService = jasmine.createSpyObj('mySpy', ['add', 'subtract']);
			mockCalculatorService.add.and.returnValue(5);
			mockCalculatorService.subtract.and.returnValue(1);
		});

		it('should add 3 and 2 and get 5', function() {
			var controller = $controller('myController', {$scope: $scope, CalculatorService: mockCalculatorService});
			$scope.add(3, 2);
			expect($scope.calculResult).toEqual(5);
		});

		it('should subtract 10 and 9 and get 1', function() {
			var controller = $controller('myController', {$scope: $scope, CalculatorService: mockCalculatorService});
			$scope.subtract(10, 9);
			expect($scope.calculResult).toEqual(1);
		});
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
// TESTING SERVICE WITH DEPENDENCIES ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING SERVICE WITH DEPENDENCIES', function() {
		var UserService;

		beforeEach( inject( function(_UserService_) {
			UserService = _UserService_;
		}));

		it('should return a full name', function() {
			expect(UserService.getFullName()).toEqual('Jane Doe');
		});
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING AJAX CALLS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING AJAX CALLS', function() {
		var $httpBackend;
		var AppModel;

		beforeEach(inject(function($injector) {
			$httpBackend = $injector.get('$httpBackend');  
			AppModel = $injector.get('AppModel');
		}));

		afterEach(function() {
			$httpBackend.verifyNoOutstandingExpectation();
			$httpBackend.verifyNoOutstandingRequest();
		});

		it('should make an $http request getting states', function() {
			$httpBackend.expectGET('http://127.0.0.1:8080/todos').respond([{nom: 'un truc à faire', presentation: 'une belle présentation'}, {nom: 'et autre chose', presentation: 'voila voila'}]);
			AppModel.getStates().then(
				function(data) {
					expect(data).toEqual([{nom: 'un truc à faire', presentation: 'une belle présentation'}, {nom: 'et autre chose', presentation: 'voila voila'}]);
				}
			);
			$httpBackend.flush();
		});
	}); 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING FILTERS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING FILTERS', function() {
		var dashesFilter;

		beforeEach(inject(function(_dashesFilter_) {
			dashesFilter = _dashesFilter_;
		}));

		it('should replace spaces with dashes', function() {
			expect(dashesFilter('This is a good test')).toEqual('This-is-a-good-test');
		});
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
// TESTING FILTERS WITH DEPENDENCIES //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING FILTERS WITH DEPENDENCIES', function() {
		it('should transform the value', 
			inject(
				function(transformFilter) {
					expect(transformFilter('This is a test')).toEqual('transformed value');
				}
			)
		);
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING DIRECTIVES //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING DIRECTIVES', function() {
		var mySimpleElement;

		beforeEach(inject(function($compile) {
			mySimpleElement = angular.element('<tst-simple-directive></tst-simple-directive>');
			$compile(mySimpleElement);
		}));

		it('should create a DOM node with template text correctly', function() {
			expect(mySimpleElement.text()).toContain('My simple directive');
		});
	});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING DIRECTIVES //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING DIRECTIVES', function() {
		var myElement;

		beforeEach(inject(function($compile, $rootScope) {
			myElement = angular.element('<tst-external-directive></tst-external-directive>');
			$compile(myElement)($rootScope);
			$rootScope.$digest();
		}));

		it('should create a DOM node with template text correctly', function() {
			expect(myElement.text()).toContain('my external template directive');
		});
	}); 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING DIRECTIVES BINDINGS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING DIRECTIVES BINDINGS', function() {
		var myDirElement;

		beforeEach(inject(function($compile, $rootScope) {
			myDirElement = angular.element('<tst-binding-directive person="person"></tst-binding-directive>');
			
			$rootScope.person = {firstName:'John', lastName: 'Doe'};

			$compile(myDirElement)($rootScope);
			$rootScope.$digest();
		}));

		it('should create a DOM with good template', function() {
			expect(myDirElement.text()).toContain('John Doe');
		});
	}); 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TESTING EVENTS ON DIRECTIVES //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	describe('TESTING EVENTS ON DIRECTIVES', function() {
		var myEventElement;

		beforeEach(inject(function($compile, $rootScope) {
			myEventElement = angular.element('<tst-events-directive is-activated="false"></tst-events-directive>');
			
			$compile(myEventElement)($rootScope);
			$rootScope.$digest();
		}));

		it('should toggle to activated', function() {
			var button = myEventElement.find('button')[0];
			button.click();
			expect(myEventElement.text()).toContain('This directive is activated: true');
		});
	}); 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
}); 